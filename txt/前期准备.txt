5个时代
1.jsp加后台的模版引擎
2.后端为主的mvc
3.ajax的单页面应用（异步同步可能进行）
4.前端为主的mvc基于框架
5.nodejs


----------------------------淘宝前后端分离实践---------------------------------
为什么要前后端分离就跟代码为什么要重构一样
1.关注分离点
2.职责分离
3.对的人做对的事
4.更好的共建模式
5.快速反应变化

早期一个人全包--后面维护的人看到了一锅粥--重构--服务端的构架改造（后端MVC时代，后端掌握一切，前端套页面）--在时代的浪潮下,前端的代码很复杂
1.无法统一协作，代码充满约定
2.js跟css,依赖后端输出html
3.数据有的依赖于ajax，有的印在DOM上
4.有的业务逻辑在前端，有的在model层，更多的在view层
前后端依旧高度耦合
1.前端依赖服务端开发环境
2.在服务端View层高度耦合
3.沟通成本高
4.职责不清晰
view层谁来负责
1.前端写demo,后端套页面
后端需要写html
前端仍然要确认后端写的HTML
2.前端写view层，后端只管数据
前端熟悉后端语言
前端需要了解后端架构

无法良好的支持跨终端
1.业务逻辑散落在应用中
2.渲染逻辑强依赖后端页面
前后端依旧高度耦合
1.沟通成本上升
2.维护成本上升
3.无法快速的相应变化
4.代码会腐烂

淘宝的第一次前后端大战
前端为主的mvc基于框架（5个时代中的第4各阶段）
前后端职责清晰了，分离干净了，分工明确了但是职责重叠，各玩各的。
职责问题：
只是单纯的调用用接口的话，职责重叠，各玩各的。
性能问题：
渲染，取值都在客户端，有性能能问题
资源到齐才能进行，有短暂的白屏
移动设备低网速的体验很差
重用问题：
模版无法套用，维护上的麻烦
逻辑无法重用，前端的校验后端还需要在做一次
路由无法重用，前端的路由后端未必存在
跨终端问题：
业务太靠前，导致不同端重复实现
逻辑太靠前，造成维护上的不易
seo问题
渲染都在客户端，模版无法重用，seo实现麻烦

淘宝的第二次前后端大战
定义前后端，到底是前后端的划分是怎样
1.工作职责？
2.硬体环境？
有了nodejs重新定义前后端，在服务端（java）和浏览器(js)的中间层，架了一个中间层（nodejs）
为啥要用nodejs
1.前段熟悉的语言
2.都是js，可以前后端复用
3.体质适合：事件驱动、非阻塞I/O口
4.适合IO密集型集体业务
5.执行速度不差
职责划分
后端
服务器  java
1.服务层
2.提供数据接口
3.维持数据稳定
4.封装业务逻辑
前端
服务器  nodejs
1.跑在服务器上的js
2.转发数据，串接服务
3.路由设计，控制逻辑
4.渲染页面，体验优化
5.更多可能性
浏览器  js+html+css
1.跑在浏览器上的js
2.css、js加载时运行
3.dom操作
4.任何的前端框架工具
5.共用模板路由

职责清晰的构架+前端范围的扩展=更多的可能

实例展示
淘宝首页优化
需求
静态资料展示，方便运营管理
更好的承载密集且庞大的流量
解决方案
页面缓存与定时刷新，返回缓存资料
nodejs产出静态页面到CDN，定时刷新
淘宝详情页优化
单日四亿PV，页面数据来自各个不同接口
为了不影响体验，先产生页面框架后
在发起多个异步请求取数据更新页面
这些多出来的请求带来的影响不小，尤其在无线端
解决方案
在NodeJS端使用 Bigpiper 技术
合并请求，降低负担
分批输出，不影响体验
接口性能优化
拆分大接口为独立小接口，并发请求
串行 => 并行，大幅缩短请求时间
部属优化
一台NodeJS对多台JAVA服务器
合理的分配服务器带来最大的产出
页面渲染优化
前后端共享模版
首屏服务器渲染
次屏浏览器渲染
局部刷新浏览器渲染
单页面应用优化
前后端共享路由与模版
前端换页，浏览器端渲染
直接输入网址，服务器渲染
SEO问题迎刃而解
可靠性优化
单元测试，页面测试，回归测试，持续集成

具体的改造
接口服务化，代码模块化，功能组件化，实现前后端分离

1.服务化：
接口规范
基于 JSON Schema
增强 在 请求与返回 的 条件描述
扩展 format ，增加业务定义
接口管理平台
自动化管理文档，提供以下功能
版本管理 - 比较, 合并, 历史记录
应用发布 - 应用灰度, 应用回滚
接口验证 - 格式验证, 回归测试
接口模拟
透过 接口定义 产生 模拟数据
前端不需等待后端的接口，即可开始开发业务
基于不同条件产生模拟数据，测试 边界情况
后端的接口必须通过接口验证，降低 联调成本
NODEJS - 模块支持
抽象支持不同接口 - HTTP，MySQL，etc.
Data Proxy - 只负责数据通讯与搬运
前端开发不需关注实践细节，仅使用数据
后续迁移成本低
与接口管理平台整合

2.模块化：
越来越多人重视浏览器端JS的模块化
但也是有项目是一个jQuery走到底

但到了服务器端的NodeJS
模块化是一个必须遵守的标准

但是我们写的JS模块
并不仅限于 NODEJS端
EVERYTHING IS MODULE
Model	Helper	Utility
View	CSS	DOM Event
Controller	Route	etc...
Other Libraries, ...

模块选型
毫无疑问的 COMMONJS
加上 工具支持 输出成不同规范
CommonJS, CMD, AMD, KMD, WhateverMD

前后端复用
透过一致的模块规范，加上都是用JS编写
模版可重用在浏览器端与服务器端
模型与方法可重用在浏览器端与服务器端
控制与路由可重用在浏览器端与服务器端
或是更多的可能

模块预处理
除了 CommonJS标准 转换外，
是否能做其他预处理？
模块预处理
JS Convert：coffee script, dart, etc.
ES6 Complier：Traceur-Complier, JSDC, etc.
CSS Complier：sass, less, stylus, etc.
共用模块加载：polyfill, etc.
业务预处理
其他的可能

这都是之前的分工模式下很难做到的

3.组件化：
封装
把细粒度的模块封装成应付业务需求的组件
组合
挑选不同的组件，完成实际的应用
多型
针对不同环境，单一组件 可具备 不同型态
同一组件在不同环境下可以有不同的行为
但是共用同样的逻辑

例如一个地址选择器

在不同的设备：pc, mobile, pad, tv
不同的环境：browser, native app, hybrid app上

有著不一样的呈现结构，不一样的交互方式。
但有著一样的校验逻辑，共用同样的数据接口。

如何办到？

封装适合的组件。不同的场景组合不同的结果
透过多型机制正确的输出

而且可以服务器、浏览器通用

框架化：
中途岛

分离是为了职责专注，改变是为了让产品更好，过程中并不是没有遇到困难

------------------选型准备--------------------
我们现在要确定要用怎样的一种前端框架来配合或者说是适应这种nodejs一种中间层
框架选型的几个重要特征



在已经决定使用nodejs这个测试服务器模拟数据接口，来确定前后段分离的情况下，


前端不需要依赖于服务端的开发环境（渲染逻辑强依赖后端页面），前后端已经耦和程度已经很低，不会在各个层面都出现前后端代码的情况（业务逻辑散落在应用各处）。

在使用nodejs作为中间层实现前后端分离的情况下，前后端基本解耦合，在前端框架的选型中以下几个框架可供参考。

angular.js
优点：
1.国外框架，技术相当成熟，API文档很全；
2.MVC模式，模块化编程，服务的注入使前端代码逻辑清晰，切分职责更加清晰；
3.项目后期可拓展性，及维护性和迭代性有保障；
4.Directive自定义组件（但是组件不能跟nodejs进行复用）可进行复用，代码移植性高；
5.考虑将来要做移动端，基于angularjs的移动端框架ionic有相对成熟的方案，使用相同内核的框架，学习成本低；
缺点：
1.框架体积庞大，项目逐渐庞大以后，性能欠佳；
2.mvvm双向数据绑定的模式，在nodejs端渲染数据效果不好；
3.在C层控制器中不能进行DOM操作，则必须依赖JQ插件；
4.毕竟是一款前端框架，跑在服务端整体性能不好；
争议：
路由问题，考虑安全家2.0门户网站的特性(seo)，是否启用路由，实行单页面应用，或者实行部分路由。同时路由与nodejs保持同步。

vue.js
优点：
1.轻量级框架，拥有angularjs大部分优点，且性能高于angularjs；
2.模块化，相比于angularjs，vuejs可结合三方模块构建工具
（1）commonjs，（2）requirejs，（3）seajs，
（4）使用ES6的模块化功能，再结合Webpack进行相应打包是目前最热门的方案
这里推荐使用nodejs组件化执行的一个默认标准commonjs可实现代码模块化和组件的复用；
3.简单上手在团队可以很快利用开，文档完善友好；
缺点：
1.同样有mvvm数据渲染的问题
2.一般用于移动端


react.js
优点：
1.同样是一款轻量级框架，有一个VDOM的概念，速度快，整体性能优秀；
2.具有最优秀的组件化方案，封装组件代替模版，根据状态的改变，组成用户界面；
3.独有的数据处理方式，单项数据流，利用组件状态改变来控制数据的互动，渲染速度快。
缺点：
1.API不够稳定，无法预测将来的API是或否会有较大改变；
2.React本身只是一个V而已，不能算是一个框架，如大型项目想要一套完整的框架的话，也许还需要引入其他相关的东西；
争议：独有的jsx模式，HTML与JavaScript的混写模式，对每个人的编程习惯影响不同，影响效率。


原生+JQ部分插件+bootstrap
优点：
1.几乎不用耗费任何学习成本，上手就来；
2.消除沟通障碍，成员之间交流方便；
3.模板在服务端的数据渲染非常友好，可以提升用户体验；
4.没有框架的糅杂，代码清晰，有利于seo，
缺点：
1.没有了框架的mvvm的模式，在处理数据方面，可能要花更多的时间去优化。
2.没有一些框架的支持，在js交互方面，需要更强的理解，以及需要自己封装一些常用的组件。


总节：在使用nodejs做前后端分离，在nodejs服务端已经做好路由及视图层面，基本前端不需要任何框架的支持，同时也秉承了原生为王的思想，如需要做一些功能及一些效果和方便DOM操作时可适当引入部分插件。但angularjs是一个成熟的框架，集成了许多实用的功能，指令已经封装了很多DOM操作，实际开发中对js语法不用深入理解及能上手。具体方案有待讨论。

----------------reactjs参考-------------------

https://www.zhihu.com/question/23444167
http://www.ruanyifeng.com/blog/2015/03/react.html
http://react-china.org/t/react-one-way-data-flow/2709/2


---------浏览器路由和服务器路由-------------

服务端路由：每跳转到不同的URL，都是重新访问服务端，然后服务端返回页面，
1.页面也可以是服务端获取数据，然后和模板组合，返回HTML，
2.也可以是直接返回模板HTML，然后由前端JS再去请求数据，使用前端模板和数据进行组合，生成想要的HTML。


前端路由：每跳转到不同的URL都是使用前端的锚点路由，实际上只是JS根据URL来操作DOM元素，根据每个页面需要的去服务端请求数据，返回数据后和模板进行组合，当然模板有可能是请求服务端返回的，这就是 @赵望野 说的 SPA 单页程序，不知道你有没有彻底的明白了？如果理解了区别，怎么做应该就清楚了。

作者：徐海峰
链接：http://www.zhihu.com/question/24321175/answer/27410834
来源：知乎
著作权归作者所有，转载请联系作者获得授权。


路由其实就是url的不同，页面呈现的状态不一样，浏览器端实际上是不存在路由，因为没有不同的url，只有


-----------服务器端渲染和浏览器端渲染-----------------------
http://sanwen8.cn/p/2fbmzsf.html


--------------------------模版引擎---------------------------
jsp，本质上也是一种模板引擎，再到功能稍微强大的freemarker，这两种都是属于java语系的。

js语系有
1.jade，类python的语法规则以及较低的解析效率，早起express框架早期作为模版引擎
2.ejs，强大，功能和写法接近jsp.最近的express4换成了handlebars


各种js模版引擎对比
http://www.cnblogs.com/guohu/p/3870677.html



模板引擎就像是html的解析生成器，将对应的模板填充完数据之后生成静态的html页面。它可以在浏览器端（比如angular中指令所用的模板）也可以在服务器端执行，不过一般用于服务器端。因为它的一个作用是抽象公共页面来重用，如果在服务端填充数据，可以减少回填数据给页面的ajax请求，从而提升浏览器端整体页面渲染速度。


如果使用angularjs,自带指令的渲染模版，且是通过ajax的方式，如果把angularjs放在服务器，数据直直接通过js控制ajax方式请求通过自身框架的渲染模版，这就违背了减少ajax请求的机制，渲染速度还是提不上去.




如果nodejs框架选用Express4，模板引擎只能在ejs/jade/hogan/hbs中选择一个，默认是handlebars





http://yalishizhude.github.io/2016/04/19/front-back-separation/

https://yalishizhude.github.io/2016/01/22/handlebars/

---------------------新问题-------------------
angularjs跑在服务器端的性能不太好
reactjs可以在浏览器和服务器上运行
demo13是服务器首屏渲染的例子









